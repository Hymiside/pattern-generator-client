from typing import Dict

from aiogram import Bot, Dispatcher, executor, types

from config import Config
from pkg.service import service
from pkg.keyboard import keyboard


config = Config()
bot = Bot(token=config.token)
dp = Dispatcher(bot)


@dp.message_handler(commands="start", state="*")
async def start(message: types.Message):
    response: Dict[str, str] = service.user_status(message.from_user.id)

    match response["status"]:
        case "user already exists":
            await message.answer("–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ–∑–¥–∞–≤–∞–π"
                                 " –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram üëá", reply_markup=keyboard.main_keyboard(), parse_mode=types.ParseMode.MARKDOWN_V2)
        case "user does not exist":
            await message.answer(f"*–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}üëã*\n\n–≠—Ç–æ "
                                 f"–±–æ—Ç —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram, —Å–∫–æ—Ä–µ–µ —á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω üëá\n\n"
                                 f"*–ö—Å—Ç–∞—Ç–∏*, –º—ã –∑–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ –Ω–∞ —Å—á—ë—Ç *50 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π*, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç üí∏", reply_markup=keyboard.main_keyboard(),
                                 parse_mode=types.ParseMode.MARKDOWN)
        case "error":
            await message.answer("**–ë–æ—Ç –ø–æ–ª–æ–º–∞–ª—Å—è :(**\n\n–°–æ–æ–±—â–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ "
                                 "–æ–± —ç—Ç–æ–º @hymiside", parse_mode=types.ParseMode.MARKDOWN_V2)


@dp.callback_query_handler(text="balance")
async def get_balance(callback: types.CallbackQuery):
    response: Dict[str, str] = service.get_balance(callback.from_user.id)
    match response["status"]:
        case "ok":
            await callback.message.edit_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {response['balance']} —Ä—É–±–ª–µ–π üí∞")
            await callback.message.edit_reply_markup(reply_markup=keyboard.back_keyboard())
            await callback.answer()
        case "error":
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è ¬Ø\_(„ÉÑ)_/¬Ø")
            await callback.message.edit_reply_markup(reply_markup=keyboard.back_keyboard())
            await callback.answer()


@dp.callback_query_handler(text="update_cash")
async def update_cash(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç üí∏üëá")
    await callback.message.edit_reply_markup(reply_markup=keyboard.cash_keyboard())
    await callback.answer()


@dp.callback_query_handler(text="back")
async def update_cash(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ–∑–¥–∞–≤–∞–π"
                                     " –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram üëá")
    await callback.message.edit_reply_markup(reply_markup=keyboard.main_keyboard())
    await callback.answer()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
